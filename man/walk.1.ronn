walk(1) -- A fast, lightweight, general purpose build and task execution utility.
=======================================================

## SYNOPSIS

`walk` `--version`<br>
`walk` [target1] [target2] ...

## DESCRIPTION

Walk is a small utility that can be used to execute tasks, or build programs
from source. It's similar to make in many ways, but with some fundamental
differences that make it vastly simpler, and arguably more powerful.

At the core of walk(1) is a [Directed Acyclic
Graph](https://en.wikipedia.org/wiki/Directed_acyclic_graph) (DAG). DAG's are a
magical data structure that allow you to easily express dependency trees.
You'll find DAG's everywhere; in
[git](http://eagain.net/articles/git-for-computer-scientists/), languages,
[infrastructure tools](https://github.com/hashicorp/terraform/tree/master/dag),
etc. walk(1) provides a general UNIX utility to express a DAG as a set of targets
(files) that depend on each other.

## OPTIONS

  * `-v`:
    Show stdout from rules when executing the **exec** phase.

  * `-d`:
    Print the dependencies of the target(s).

## TARGETS

Targets can be used to represent a task, or a file that needs to be built. They
are synonymous with targets in make(1).

## RULES

Rules determine _how_ a target is built, and are defined as executable files.

When walk(1) begins execution of a target, it first attempts to find a
compatible rule for the target by looking at executable files ending in `.walk`
or any files inside a `.walk` directory. As an example, say we wanted to build
`hello.o` by executing `walk hello.o`. walk(1) will attempt, in order, the
following files:

  .walk/hello.o<br>
  hello.o.walk<br>
  .walk/default.o<br>
  default.o.walk<br>

walk(1) will only look for this files in the same directory that the target is
in. If no suitable rule is found, and the file already exists, then walk(1)
assumes that it's a static file and does nothing.

## PHASES

walk(1) has two phases:

  * `Plan`:
    In this phase, walk(1) executes all the rules with `deps` as the first
    argument. Rules are expected to print a newline delimited list of files
    that the target depends on, relative to the target. Internally, walk(1)
    builds a graph of all of the targets and their dependencies.

  * `Exec`:
    In this phase, walk(1) executes all of the rules files with `exec` as the
    first argument. Rules are expected to build the given target, but don't
    need to if it's, for example, a task (like `test`, `clean`, etc).

By separating these phases, walk(1) can build a compact dependency graph, and
perform fast parallel builds.

## COMPARISONS

walk(1) is heavily inspired by make(1) and
[redo](https://github.com/apenwarr/redo). There are a number of reasons why
walk(1) may be better in certain scenarios:

  * `Simplicity`:
    walk(1) does not have anything synonymous with make(1)'s
    [Makefile](https://www.gnu.org/software/make/manual/make.html). Everything
    is simply defined as executable files, which provides the ultimate level of
    flexibility on UNIX to compose existing tools.
  * `Conditional Execution`:
    For mostly legacy reasons, make(1) determines whether a target needs to be
    built based on the file modification time of its dependencies. While this
    works well for building C/C++ programs on a local machine, it breaks down
    in scenarios where you have a large complex build system that runs in a
    shared environment. Also, depending on the target, other caching
    mechanisms like content hashing may be more suitable. There are
    [attempts](http://blog.jgc.org/2006/04/rebuilding-when-hash-has-changed-not.html)
    to get around this handicap, but none that work well. walk(1) leaves
    conditional execution up to the Rule.
   * `Recursiveness`:
    Recursive make is generally a mistake. Because of walk(1)'s design, you can
    execute `walk` from any directory, and always get the same result.

## EXAMPLES

See <https://github.com/ejholmes/walk/tree/master/test> for examples.

## BUGS

You can find a list of bugs at <https://github.com/ejholmes/walk/issues>.
Please report any issues there.

## COPYRIGHT

Walk is Copyright (C) 2017 Eric Holmes

## SEE ALSO

make(1), bash(1)
