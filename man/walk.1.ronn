walk(1) -- A fast, lightweight, general purpose, graph based build and task execution utility.
==============================================================================================

## SYNOPSIS

`walk` `--help`<br>
`walk` [`-v`] [target...]<br>
`walk` [`-d`] [target]

## DESCRIPTION

walk(1) is a small utility that can be used to execute tasks, or build programs
from source. It's similar to make(1) in many ways, but with some fundamental
differences that make it vastly simpler, and arguably more powerful.

At the core of walk(1) is a [Directed Acyclic
Graph](https://en.wikipedia.org/wiki/Directed_acyclic_graph) (DAG). DAG's are a
magical data structure that allow you to easily express dependency trees.
You'll find DAG's everywhere; in
[git](http://eagain.net/articles/git-for-computer-scientists/), languages,
[infrastructure tools](https://github.com/hashicorp/terraform/tree/master/dag),
etc. walk(1) provides a generic primitive to express a DAG as a set of targets
(files) that depend on each other.

walk(1) can be used to build just about anything, from C/C++ programs to
frontend applications (css, sass, coffeescript, etc) and infrastructure
(CloudFormation, Terraform). Basically, anything that can express it's
dependencies can be built.

## OPTIONS

  * `-v`:
    Show stdout from rules when executing the **exec** phase.

  * `-d`:
    Print the dependencies of the target. This can be used in conjunction with
    a file watching utility like fswatch(1) to execute a target whenever its
    dependencies have changed.

  * `-j`:
    Controls the number of targets that are executed in parallel. By default,
    targets are executed with the maximum level of parallelism that the graph
    allows. To limit the number of targets that are executed in parallel, set
    this to a value greater than `1`. To execute targets serially, set this to
    `1`.

  * `-p`:
    Prints the underlying DAG to stdout, using the provided format. Available
    formats are `dot`.

## TARGETS

Targets can be used to represent a task, or a file that needs to be built. They
are synonymous with targets in make(1). In general, targets are relative paths
to files that need to be built, like `src/hello.o`. When a target does not
relate to an actual file on disk, it's synonymous with `.PHONY` targets in
make(1).

walk(1) will look for a "rule" file to determine if it has dependencies, or
needs to be built. Rules are described below.

## RULES

Rules determine _how_ a target is executed, and what other targets it depends
on. Rules are defined as executable files.

When walk(1) begins execution of a target, it first attempts to find a
compatible rule for the target by looking at executable files ending in `.walk`
or any files inside a `.walk` directory. As an example, say we wanted to build
`hello.o` by executing `walk hello.o`. walk(1) will attempt, in order, the
following files:

    .walk/hello.o
    hello.o.walk
    .walk/default.o
    default.o.walk

As an example, a simple rule file for building `.o` files from `.c` files,
could be named `default.o.walk` and might look like this:

    #!/bin/bash
    
    target=$2
    src=${2//.o/.c}
    
    deps() {
      echo $src
    }
    
    compile() {
      gcc -Wall -o $target -c $src
    }
    
    case $1 in
      deps) deps ;;
      exec) compile ;;
    esac

When walk executes a rule, it executes it with the following positional arguments:

  * `$1`:
    The [phase][PHASES] (`deps` or `exec`).
  
  * `$2`:
    The name of the target to build (e.g. `hello.o`).

walk(1) will only look for these files in the same directory that the target is
in. If no suitable rule is found, and the file already exists, then walk(1)
assumes that it's a static file, and simply checks for it's existence.

It's generally considered good practice to add an `all` target in each
directory, which allows you to execute `walk` within it. For example, you may
have a series of modules in subdirectories, each with their own `all` target,
then the parent directory specifies all of those sub directories as
dependencies.

## PHASES

walk(1) has two phases:

  * `Plan`:
    In this phase, walk(1) executes all the rules with `deps` as the first
    argument. Rules are expected to print a newline delimited list of files
    that the target depends on, relative to the target. Internally, walk(1)
    builds a graph of all of the targets and their dependencies.

  * `Exec`:
    In this phase, walk(1) executes all of the rules files with `exec` as the
    first argument. Rules are expected to build the given target, but don't
    need to if it's, for example, a task (like `test`, `clean`, etc).

By separating these phases, walk(1) can build a compact dependency graph, and
perform fast parallel builds.

## COMPARISONS

walk(1) is heavily inspired by make(1) and
[redo](https://github.com/apenwarr/redo). There are a number of reasons why
walk(1) may be better in certain scenarios:

  * `Simplicity`:
    walk(1) does not have anything synonymous with make(1)'s
    [Makefile](https://www.gnu.org/software/make/manual/make.html). Everything
    is simply defined as executable files, which provides the ultimate level of
    flexibility on UNIX to compose existing tools.
  * `Conditional Execution`:
    For mostly legacy reasons, make(1) determines whether a target needs to be
    built based on the file modification time of its dependencies. While this
    works well for building C/C++ programs on a local machine, it breaks down
    in scenarios where you have a large complex build system that runs in a
    shared environment. Also, depending on the target, other caching
    mechanisms like content hashing may be more suitable. There are
    [attempts](http://blog.jgc.org/2006/04/rebuilding-when-hash-has-changed-not.html)
    to get around this handicap, but none that work well. walk(1) leaves
    conditional execution up to the Rule.
   * `Recursiveness`:
    Recursive make is generally a mistake. Whole papers have been [written
    about this topic](http://aegis.sourceforge.net/auug97.pdf). Because of
    walk(1)'s design, you can execute `walk` from any directory, and always get
    the same result. Recursiveness comes for free.

## EXAMPLES

For the following examples, we'll assume that we want to build a program called
[hello](https://github.com/ejholmes/walk/tree/master/test/111-compile) from
`hello.c` and `hello.h`. This can be expressed as a DAG, like the following:

                    all
                     |
                   hello
                     |
                  hello.o
                  /     \
              hello.c hello.h


When `walk` is invoked without any arguments, it defaults to a target called `all`:

    walk

You can provide one or more targets as arguments to specify where to start
execution from. For example, if wanted to build just `hello.o` and any of it's
dependencies:

    walk hello.o

When rules are executed, they're always executed relative to the basename of
the target. This means that we can execute `walk` from any directory, and
always get the same behavior. All of the following are identical:

    walk hello.o
    cd .. && walk 111-compile/hello.o
    cd .. && walk test/111-compile/hello.o

See more at <https://github.com/ejholmes/walk/tree/master/test>.

## SIGNALS

When walk(1) receives SIGINT or SIGTERM, it will forward these signals down to
any rules that are currently executing. With that in mind, it's a good idea to
ensure that any potentially long running rules handle these signals to
terminate gracefully.

## BUGS

You can find a list of bugs at <https://github.com/ejholmes/walk/issues>.
Please report any issues there.

## COPYRIGHT

Walk is Copyright (C) 2017 Eric Holmes

## SEE ALSO

make(1), bash(1)

# vi:filetype=markdown
