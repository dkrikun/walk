#!/bin/bash

set -eo pipefail

# When creating a new release, we'll build for these architectures. Maps to the
# GOOS env var.
release_archs=(darwin linux)

phase=$1
target=$2

install() {
  exec go install .
}

# Creates a new release:
#
#  1. Tags the git commit with vX.X.X (from VERSION)
#  2. Creates a GitHub release for the tag.
#  3. Uploads all of the files, which are provided as positional arguments.
release() {
  local tag=v$(cat VERSION)
  local user=ejholmes
  local repo=walk

  if [ -z "$GITHUB_TOKEN" ]; then
    >&2 echo "GITHUB_TOKEN is missing."
    return 1
  fi

  git tag ${tag} && git push && git push --tags

  github-release release \
    --user ${user} \
    --repo ${repo} \
    --tag ${tag}

  for f in $@; do
    github-release upload \
      --user ${user} \
      --repo ${repo} \
      --tag ${tag} \
      --name $(basename $f) \
      --file $f
  done
}

case $target in
  all)
    case $phase in
      deps) 
        echo bin
        echo test
        echo install
        echo docs
        ;;
    esac ;;

  clean)
    case $phase in
      deps)
        echo test/clean
        echo bin/clean
        ;;
    esac ;;

  install)
    case $phase in
      deps) echo src ;;
      exec) install ;;
    esac ;;

  release)
    case $phase in
      deps)
        for arch in ${release_archs[@]}; do
          echo bin/walk-$arch
        done
        echo dist/debian/walk.deb
        ;;
      exec) release $($0 deps $target) ;;
    esac ;;

  version.go)
    case $phase in
      deps) echo VERSION ;;
      exec) 
        cat <<EOF > "$target"
// DO NOT MODIFY
// Auto generated from by 'walk version.go'
package main

// Version is the version of walk(1)
const Version = "$(cat VERSION)"
EOF
        ;;
    esac ;;

  bundled)
    case $phase in
      exec) exec bundle install ;
    esac ;;

  bin|test|docs|man|dist)
    case $phase in
      deps) echo $target/all ;;
    esac ;;

  src)
    case $phase in
      deps) ls *.go | grep -v _test ;;
    esac ;;

  error)
    case $phase in
      deps) echo test/000-cancel/fail ;;
    esac ;;

  VERSION|*.go) ;; # noops
  *) >&2 echo "No rule for target \"$target\"" && exit 1 ;;
esac
